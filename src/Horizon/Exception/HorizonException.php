<?php


namespace ZuluCrypto\StellarSdk\Horizon\Exception;


use GuzzleHttp\Exception\ClientException;
use Throwable;

class HorizonException extends \Exception
{
    /**
     * Usually a URL referencing additional documentation
     *
     * @var string
     */
    protected $type;

    /**
     * @var string
     */
    protected $title;

    /**
     * @var string
     */
    protected $detail;

    /**
     * Horizon instance ID
     *
     * @var string
     */
    protected $instance;

    /**
     * URL that was requested and generated the error
     *
     * @var string
     */
    protected $requestedUrl;

    /**
     * HTTP method used to request $requestedUrl
     *
     * @var string
     */
    protected $httpMethod;

    /**
     * @var int
     */
    protected $httpStatusCode;

    /**
     * Original exception generated by the client
     *
     * @var ClientException
     */
    protected $clientException;

    /**
     * @param                 $requestedUrl
     * @param                 $httpMethod
     * @param                 $raw
     * @param ClientException $clientException
     * @return HorizonException
     */
    public static function fromRawResponse($requestedUrl, $httpMethod, $raw, ClientException $clientException)
    {
        $title = isset($raw['title']) ? $raw['title'] : 'Unknown Exception';

        $exception = new HorizonException($title);
        $exception->title = $title;
        $exception->requestedUrl = $requestedUrl;
        $exception->httpMethod = $httpMethod;

        if (isset($raw['type'])) $exception->type = $raw['type'];
        if (isset($raw['status'])) $exception->httpStatusCode = $raw['status'];
        if (isset($raw['detail'])) $exception->detail = $raw['detail'];

        // Message can contain better info after we've filled out more fields
        $exception->message = $exception->__toString();

        return $exception;
    }

    /**
     * @param string         $title
     * @param Throwable|null $previous
     */
    public function __construct($title, Throwable $previous = null)
    {
        parent::__construct($title, 0, $previous);
    }

    /**
     * @return string
     */
    public function __toString() {
        return sprintf('[%s] %s: %s (Requested URL: %s %s)',
            $this->httpStatusCode,
            $this->title,
            $this->detail,
            $this->httpMethod,
            $this->requestedUrl
        );
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @param string $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * @return string
     */
    public function getDetail()
    {
        return $this->detail;
    }

    /**
     * @param string $detail
     */
    public function setDetail($detail)
    {
        $this->detail = $detail;
    }

    /**
     * @return string
     */
    public function getInstance()
    {
        return $this->instance;
    }

    /**
     * @param string $instance
     */
    public function setInstance($instance)
    {
        $this->instance = $instance;
    }

    /**
     * @return string
     */
    public function getRequestedUrl()
    {
        return $this->requestedUrl;
    }

    /**
     * @param string $requestedUrl
     */
    public function setRequestedUrl($requestedUrl)
    {
        $this->requestedUrl = $requestedUrl;
    }

    /**
     * @return int
     */
    public function getHttpStatusCode()
    {
        return $this->httpStatusCode;
    }

    /**
     * @param int $httpStatusCode
     */
    public function setHttpStatusCode($httpStatusCode)
    {
        $this->httpStatusCode = $httpStatusCode;
    }

    /**
     * @return ClientException
     */
    public function getClientException()
    {
        return $this->clientException;
    }

    /**
     * @param ClientException $clientException
     */
    public function setClientException($clientException)
    {
        $this->clientException = $clientException;
    }
}